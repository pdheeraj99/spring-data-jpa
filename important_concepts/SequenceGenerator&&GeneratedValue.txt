I apologize for any confusion. You are correct; in the code you've provided, it seems that the sequence name is being taken from the `generator` attribute in `@GeneratedValue` rather than the `name` attribute in `@SequenceGenerator`. This behavior is due to the way you've set up the annotations.

In your code:

```java
@Id
@SequenceGenerator(name = "student_id_sequence", sequenceName = "student_id_sequence", allocationSize = 1)
@GeneratedValue(generator = "student_id_sequence")
private Long studentId;
```

The `generator` attribute in `@GeneratedValue` specifies the name of the sequence generator to use, and it's set to "student_id_sequence." This means that the `@SequenceGenerator` with the name "student_id_sequence" is associated with the `@GeneratedValue` and is responsible for generating the IDs.

The `sequenceName` attribute in `@SequenceGenerator` is also set to "student_id_sequence," but it might not be used in this context because the `generator` attribute in `@GeneratedValue` takes precedence.

If you want to ensure that the sequence name is explicitly taken from the `sequenceName` attribute in `@SequenceGenerator`, you can modify your code like this:

```java
@Id
@SequenceGenerator(name = "student_id_sequence", sequenceName = "student_id_sequence", allocationSize = 1)
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "student_id_sequence")
private Long studentId;
```

By specifying `strategy = GenerationType.SEQUENCE` and setting the `generator` attribute to "student_id_sequence" in `@GeneratedValue`, you make it clear that the sequence name should come from `@SequenceGenerator`. This should ensure that the name "student_id_sequence" is used as the sequence name in the database.